points(sm_tri_x, sm_tri_y+0.5, pch=16, cex=0.1, col="green")
points(sm_sq_x, sm_sq_y, pch=16, cex=0.1, col="red")
points(sm_tri_x, sm_tri_y, pch=16, cex=0.1, col="green")
points(side_tri_x, side_tri_y, pch=16, cex=0.1, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.275, n_pnts)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
# check that all trinagular cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(tri_x, tri_y, pch=16, cex=0.5, col="red")
points(sm_tri_x, sm_tri_y+0.5, pch=16, cex=0.1, col="green")
points(sm_sq_x, sm_sq_y, pch=16, cex=0.1, col="red")
points(sm_tri_x, sm_tri_y, pch=16, cex=0.1, col="green")
points(side_tri_x, side_tri_y, pch=16, cex=0.1, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
source('~/GitHub/mattmotoki.github.io/images/cell_design.R')
points(1-quad_x, 1-quad_y, pch=16, cex=0.5, col="red")
points(1-side_tri_x, side_tri_y, pch=16, cex=0.1, col="green")
#------------------
# quadrilateral cells
quad_outline <- quad_cell(0.2, 0.2, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
# check that all quadrilateral cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(quad_x, quad_y, pch=16, cex=0.5, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
#------------------
# quadrilateral cells
quad_outline <- quad_cell(0.3, 0.1, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
# check that all quadrilateral cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(quad_x, quad_y, pch=16, cex=0.5, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
points(1-quad_x, 1-quad_y, pch=16, cex=0.5, col="red")
points(1-side_tri_x, side_tri_y, pch=16, cex=0.1, col="green")
#------------------
# quadrilateral cells
quad_outline <- quad_cell(0.2, 0.1, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
# check that all quadrilateral cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(quad_x, quad_y, pch=16, cex=0.5, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
points(1-quad_x, 1-quad_y, pch=16, cex=0.5, col="red")
points(1-side_tri_x, side_tri_y, pch=16, cex=0.1, col="green")
#------------------
# quadrilateral cells
quad_outline <- quad_cell(0.25, 0.1, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
# check that all quadrilateral cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(quad_x, quad_y, pch=16, cex=0.5, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
points(1-quad_x, 1-quad_y, pch=16, cex=0.5, col="red")
points(1-side_tri_x, side_tri_y, pch=16, cex=0.1, col="green")
source('~/GitHub/mattmotoki.github.io/images/cell_design.R', echo=TRUE)
# check that all trinagular cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(tri_x, tri_y, pch=16, cex=0.5, col="red")
points(sm_tri_x, sm_tri_y+0.5, pch=16, cex=0.1, col="green")
points(sm_sq_x, sm_sq_y, pch=16, cex=0.1, col="red")
points(sm_tri_x, sm_tri_y, pch=16, cex=0.1, col="green")
points(side_tri_x, side_tri_y, pch=16, cex=0.1, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.3, n_pnts)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
# small trianglular cell
sm_tri_outline <- triangular_cell(0.4, 0.2, n_pnts)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# check that all trinagular cells are self-similar
blank_plot()
points(sq_x, sq_y, pch=16, cex=1, col="blue")
points(tri_x, tri_y, pch=16, cex=0.5, col="red")
points(sm_tri_x, sm_tri_y+0.5, pch=16, cex=0.1, col="green")
points(sm_sq_x, sm_sq_y, pch=16, cex=0.1, col="red")
points(sm_tri_x, sm_tri_y, pch=16, cex=0.1, col="green")
points(side_tri_x, side_tri_y, pch=16, cex=0.1, col="red")
points(sm_tri_x+0.5, sm_tri_y, pch=16, cex=0.1, col="green")
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.25, n_pnts)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
points(side_tri_x, side_tri_y, pch=16, cex=0.1, col="black")
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.275, n_pnts)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
points(side_tri_x, side_tri_y, pch=16, cex=0.1, col="black")
source('~/GitHub/mattmotoki.github.io/images/cell_maker.R', echo=TRUE)
source("cell_plot_utils.R")
line_width <- 3
w = 50
h = 50
#------------------
# cell definitions
# square cell
sq_outline <- square_cell(0.2, 100)
sq_x <- sq_outline[, 1] + 0.5
sq_y <- sq_outline[, 2] + 0.5
# rectangular cell
rect_x <- sq_x - 0.5*(sq_x>0.5)
# small square cell
sm_sq_outline <- square_cell(0.4, 100)
sm_sq_x <- 0.5*(sm_sq_outline[, 1] + 0.5)
sm_sq_y <- 0.5*(sm_sq_outline[, 2] + 0.5)
# trianglular cell
tri_outline <- triangular_cell(0.2, 0.1, n_pnts)
tri_x <- tri_outline[, 1]+0.5
tri_y <- tri_outline[, 2]+0.5
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.275, n_pnts)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
# small trianglular cell
sm_tri_outline <- triangular_cell(0.4, 0.2, n_pnts)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# quadrilateral cell
quad_outline <- quad_cell(0.2, 0.1, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
graphics.off()
#------------------
# difficulty
png("cell_icon.png")
blank_plot()
plot_cell(2*sm_sq_x, 2*sm_sq_y, cellgreen)
dev.off()
png("difficulty_easy.png", width=w, height=h)
blank_plot()
plot_cell(2*sm_sq_x, 2*sm_sq_y, cellblue)
dev.off()
png("difficulty_medium.png", width=w, height=h)
blank_plot()
plot_cell(2*sm_sq_x, 2*sm_sq_y, cellfuscia)
dev.off()
png("difficulty_hard.png", width=w, height=h)
blank_plot()
plot_cell(2*sm_sq_x, 2*sm_sq_y, cellred)
dev.off()
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(sm_sq_x+0.25, sm_sq_y+0.25, cellyellow)
}
makeDifficultyButton()
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(sm_sq_x+0.25, sm_sq_y+0.25, cellyellow)
}
}
makeDifficultyButton()
makeDifficultyButton(cellgreen, TRUE)
plot_cell(0.5*sm_sq_x+0.25, 0.5*sm_sq_y+0.25, cellyellow)
plot_cell(0.5*sm_sq_x+0.375, 0.5*sm_sq_y+0.0.375, cellyellow)
plot_cell(0.5*sm_sq_x+0.375, 0.5*sm_sq_y+0.375, cellyellow)
makeDifficultyButton(cellgreen, FALSE)
plot_cell(0.5*sm_sq_x+0.375, 0.5*sm_sq_y+0.375, cellyellow)
plot_cell(0.75*(sm_sq_x-0.25)+0.5,
0.75*(sm_sq_y-0.25)+0.5,
cellyellow)
makeDifficultyButton(cellgreen, FALSE)
plot_cell(0.6*(sm_sq_x-0.25)+0.5,
0.6*(sm_sq_y-0.25)+0.5,
cellyellow)
plot_cell(0.61*(sm_sq_x-0.25)+0.5,
0.61*(sm_sq_y-0.25)+0.5,
cellyellow)
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, cellyellow)
}
}
# on
png("difficulty_easy_on.png")
makeDifficultyButton(cellblue, TRUE)
graphics.off()
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, cellyellow)
}
}
# on
png("difficulty_easy_on.png")
makeDifficultyButton(cellblue, TRUE)
dev.off()
png("difficulty_medium_on.png")
makeDifficultyButton(cellfuscia, TRUE)
dev.off()
png("difficulty_hard_on.png")
makeDifficultyButton(cellred, TRUE)
dev.off()
# off
png("difficulty_easy_off.png")
makeDifficultyButton(cellblue, FALSE)
dev.off()
png("difficulty_medium_off.png")
makeDifficultyButton(cellfuscia, FALSE)
dev.off()
png("difficulty_hard_off.png")
makeDifficultyButton(cellred, FALSE)
dev.off()
w = 100
h = 100
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, cellyellow)
}
}
# on
png("difficulty_easy_on.png", width=w, height=h)
makeDifficultyButton(cellblue, TRUE)
dev.off()
png("difficulty_medium_on.png", width=w, height=h)
makeDifficultyButton(cellfuscia, TRUE)
dev.off()
png("difficulty_hard_on.png", width=w, height=h)
makeDifficultyButton(cellred, TRUE)
dev.off()
# off
png("difficulty_easy_off.png", width=w, height=h)
makeDifficultyButton(cellblue, FALSE)
dev.off()
png("difficulty_medium_off.png", width=w, height=h)
makeDifficultyButton(cellfuscia, FALSE)
dev.off()
png("difficulty_hard_off.png", width=w, height=h)
makeDifficultyButton(cellred, FALSE)
dev.off()
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, color)
}
}
# on
png("difficulty_easy_on.png", width=w, height=h)
makeDifficultyButton(cellblue, TRUE)
dev.off()
png("difficulty_medium_on.png", width=w, height=h)
makeDifficultyButton(cellfuscia, TRUE)
dev.off()
png("difficulty_hard_on.png", width=w, height=h)
makeDifficultyButton(cellred, TRUE)
dev.off()
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, cellyellow)
}
}
# on
png("difficulty_easy_on.png", width=w, height=h)
makeDifficultyButton(cellblue, TRUE)
dev.off()
png("difficulty_medium_on.png", width=w, height=h)
makeDifficultyButton(cellfuscia, TRUE)
dev.off()
png("difficulty_hard_on.png", width=w, height=h)
makeDifficultyButton(cellred, TRUE)
dev.off()
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, color)
}
}
makeDifficultyButton(cellblue, TRUE)
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, color)
}
}
# on
png("difficulty_easy_on.png", width=w, height=h)
makeDifficultyButton(cellblue, TRUE)
graphics.off()
#------------------
# difficulty
makeDifficultyButton <- function(color, is_on=TRUE) {
blank_plot()
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color)
plot_cell(sm_tri_x+0.5, sm_tri_y, color)
# bot
plot_cell(sm_tri_x, 0.5-sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, color)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color)
plot_cell(0.5-sm_tri_x, sm_tri_y, color)
# top
plot_cell(sm_tri_x, 0.5+sm_tri_y, color)
plot_cell(1-sm_tri_x, 0.5+sm_tri_y, color)
# center
if (is_on) {
plot_cell(0.61*(sm_sq_x-0.25)+0.5, 0.61*(sm_sq_y-0.25)+0.5, color)
}
}
# on
png("difficulty_easy_on.png", width=w, height=h)
makeDifficultyButton(cellblue, TRUE)
dev.off()
png("difficulty_medium_on.png", width=w, height=h)
makeDifficultyButton(cellfuscia, TRUE)
dev.off()
png("difficulty_hard_on.png", width=w, height=h)
makeDifficultyButton(cellred, TRUE)
dev.off()
blank_plot()
plot_cell( (sq_x-0.5)/3+0.5, (sq_y-0.5)/3+0.5, cellyellow)
graphics.off()
#------------------
# board size
png("size_small.png", width=w, height=h)
blank_plot()
plot_cell( 1*(sq_x-0.5)/3+0.5, 1*(sq_y-0.5)/3+0.5, cellyellow)
dev.off()
png("size_medium.png", width=w, height=h)
blank_plot()
plot_cell( 2*(sq_x-0.5)/3+0.5, 2*(sq_y-0.5)/3+0.5, cellyellow)
dev.off()
png("size_large.png", width=w, height=h)
blank_plot()
plot_cell( 3*(sq_x-0.5)/3+0.5, 3*(sq_y-0.5)/3+0.5, cellyellow)
dev.off()
png("size_small.png", width=w, height=h)
blank_plot()
plot_cell( 3*(sq_x-0.5)/6+0.5, 3*(sq_y-0.5)/6+0.5, cellyellow)
dev.off()
png("size_medium.png", width=w, height=h)
blank_plot()
plot_cell( 4.5*(sq_x-0.5)/6+0.5, 4.5*(sq_y-0.5)/6+0.5, cellyellow)
dev.off()
png("size_large.png", width=w, height=h)
blank_plot()
plot_cell( 6*(sq_x-0.5)/6+0.5, 6*(sq_y-0.5)/6+0.5, cellyellow)
dev.off()
png("size_small.png", width=w, height=h)
blank_plot()
plot_cell( 0.5*(sq_x-0.5)+0.5, 1**(sq_y-0.5)+0.5, cellgreen)
dev.off()
dev.off()
png("size_small.png", width=w, height=h)
blank_plot()
plot_cell( 0.5*(sq_x-0.5)+0.5, 1**(sq_y-0.5)+0.5, cellgreen)
dev.off()
dev.off()
#------------------
# board size
png("size_small.png", width=w, height=h)
blank_plot()
plot_cell( 0.5*(sq_x-0.5)+0.5, 0.5*(sq_y-0.5)+0.5, cellgreen)
dev.off()
png("size_medium.png", width=w, height=h)
blank_plot()
plot_cell( 0.75*(sq_x-0.5)+0.5, 0.75*(sq_y-0.5)+0.5, cellgreen)
dev.off()
png("size_large.png", width=w, height=h)
blank_plot()
plot_cell( sq_x, sq_y, cellgreen)
dev.off()
blank_plot()
plot_cell( 0.5*(sq_x-0.5)+0.5, 0.5*(sq_y-0.5)+0.5, [255, 255, 255])
plot_cell( 0.5*(sq_x-0.5)+0.5, 0.5*(sq_y-0.5)+0.5, c(255, 255, 255))
blank_plot()
plot_cell( 0.5*(sq_x-0.5)+0.5, 0.5*(sq_y-0.5)+0.5, c(255, 255, 255))
blank_plot()
plot_cell( 0.5*(sq_x-0.5)+0.5, 0.5*(sq_y-0.5)+0.5, c(1, 1, 1))
9/16
